Map is not a subtype of collections interface. Therefore methods like add(), pop() are not available
A map is an object that stores key and value pairs.
It contains unique keys as the same key cannot have multiple mappings.
There are two interfaces for implementing Map in java.
    They are Map and SortedMap,
        and three classes: HashMap, TreeMap, and LinkedHashMap.

HashMap
 - unsynchronized.
 - allows to store the null keys as well, but there should be only one null key object and there can be any number of null values

Fast access time
HashMaps allow for duplicate values
 Constructors in hashmap
 HashMap()
 HashMap(int initialCapacity)
 HashMap(int initialCapacity, float loadFactor)
 HashMap(Map map)

Internally HashMap contains an array of Node and a node is represented as a class that contains 4 fields:

int hash
K key
V value
Node next

====================
Hash Table
- It is similar to HashMap, but is synchronized.
-  Hashtable stores key/value pair in hash table.
- doesn't allow any null key or value.
-  slower than HashMap
- stores the values in reverse order of entry.(last value is stored on top)
- Legacy data structure. Not used frequently

====================
LinkedHashMap
-  just like HashMap with an additional feature of maintaining an order of elements inserted into it
- contains only unique elements
- one null key and multiple null values
- non-synchronized
 Has
 int hash
 K key
 V value
 Node next
 Node previous
=======================
SortedMap Interface
This interface extends the Map interface and provides a total ordering of its elements (elements can be traversed in sorted order of keys).
The class that implements this interface is TreeMap.
The main difference between a SortedMap and a regular Map is that the elements in a SortedMap are stored in a sorted order,
whereas in a Map the elements are stored in an arbitrary order

TreeMap<Key, Value> numbers = new TreeMap<>();

Inserting
put() - inserts the specified key/value mapping (entry) to the map
putAll() - inserts all the entries from specified map to this map
putIfAbsent() - inserts the specified key/value mapping to the map if the specified key is not present in the map

Retrieve
entrySet() - returns a set of all the key/values mapping (entry) of a treemap
keySet() - returns a set of all the keys of a tree map
values() - returns a set of all the maps of a tree map

Add
get() - Returns the value associated with the specified key. Returns null if the key is not found.

Delete

remove(key) - returns and removes the entry associated with the specified key from a TreeMap
remove(key, value) - removes the entry from the map only if the specified key is associated with the specified value and returns a boolean value

Replace
replace(key, value) - replaces the value mapped by the specified key with the new value
replace(key, old, new) - replaces the old value with the new value only if the old value is already associated with the specified key

firstKey() - returns the first key of the map
firstEntry() - returns the key/value mapping of the first key of the map
lastKey() - returns the last key of the map
lastEntry() - returns the key/value mapping of the last key of the map

headMap() method returns all the key/value pairs of a treemap before the specified key

subMap() method returns all the entries associated with keys between k1 and k2 including the entry of k1.

============ To learn ==========
SkipList
ConcurrentSkipList